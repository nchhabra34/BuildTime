<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NUMBER</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PATCH_NUMBER</name>
          <description></description>
          <defaultValue>00</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_TYPE</name>
          <description></description>
          <defaultValue>build</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description></description>
          <defaultValue>devops</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RELEASE</name>
          <description></description>
          <defaultValue>release</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RELEASEVALUE</name>
          <description></description>
          <defaultValue>releasevalue</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH_CODE_VERSION</name>
          <description></description>
          <defaultValue>bcv</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CORE_CODE_VERSION</name>
          <description></description>
          <defaultValue>ccv</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>WORKSPACE</name>
          <description></description>
          <defaultValue>/var/lib/jenkinsdata/jobs/ws_test_sdp_package_artifact_ws</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INSTALLER_LOCATION</name>
          <description></description>
          <defaultValue>/opt/build/releases/devops_branch</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COMPONENT_LIST_ALL</name>
          <description>alerts,alerts-jboss,appscenter,cdpaymon,dcservices-jboss,refreshservlets,messagingservice,mobile,moneycenter,payeeverification,payitallpaymon,paymentengine-jboss,paymon,restserver,ubd-jboss,ycc,yccconfigtool,ysms,ytask,vnode,achmasterdatabase,bayesiandatabase,configdatabase,oltpdatabase,paymentsdatabase,yccdatabase,copycoreplsql,copypaymentenginesqls,distributedcacheloader

Comma separated list of components to be packaged.</description>
          <defaultValue>copypaymentenginesqls</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>COMPONENT_LIST_DEPLOY</name>
          <description>Comma separated list of components to be deployed.

alerts,alerts-jboss,appscenter,cdpaymon,dcservices-jboss,refreshservlets,newsdk,mobile,moneycenter,payeeverification,payitallpaymon,paymentengine-jboss,paymon,restserver,ubd-jboss,ycc,yccconfigtool,ysms,ytask,achmasterdatabase,bayesiandatabase,configdatabase,oltpdatabase,paymentsdatabase,yccdatabase,copypaymentenginesqls</description>
          <defaultValue>copypaymentenginesqls</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ENVIRONMENT</name>
          <description>Provide Environment</description>
          <defaultValue>auto_main</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>192.168.210.119</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <customWorkspace>${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws</customWorkspace>
  <builders>
    <hudson.tasks.Shell>
      <command>sh -x
echo Running Job  ${JOB_NAME}
pwd

# Force Sync the scripts everytime
#p4 -u ${P4_USERNAME} -P ${P4_PASSWORD} sync -f //ops/SDP/Builds/Package_New/scripts/...
p4 sync -f //ops/SDP/Builds/Package_New/scripts/...
# Force Sync the scripts everytime
#p4 -u ${P4_USERNAME} -P ${P4_PASSWORD} sync -f //ops/SDP/Database/scripts/...

p4 sync -f //ops/SDP/Database/scripts/...

echo COMPONENT_LIST_ALL=${COMPONENT_LIST_ALL}
echo COMPONENT_LIST_DEPLOY=${COMPONENT_LIST_DEPLOY}
echo BUILD_NUMBER=$BUILD_NUMBER
echo PATCH_NUMBER=$PATCH_NUMBER
echo BUILD_TYPE=$BUILD_TYPE
echo BRANCH=$BRANCH
echo RELEASE=$RELEASE
echo RELEASEVALUE=$RELEASEVALUE
echo BRANCH_CODE_VERSION=$BRANCH_CODE_VERSION
echo CORE_CODE_VERSION=$CORE_CODE_VERSION
echo Workspace=${WORKSPACE}
echo INSTALLER_LOCATION=$INSTALLER_LOCATION
echo ENVIRONMENT=${ENVIRONMENT}

# Replace the dots for RPM compatibility, if the branch name has &apos;.&apos;

FINAL_BRANCH_NAME=`echo ${BRANCH//./}`
echo FINAL_BRANCH_NAME=$FINAL_BRANCH_NAME

# Create a InjectEnv Property file

cd ${WORKSPACE}
echo &quot;

FINAL_BRANCH_NAME=${FINAL_BRANCH_NAME}
BUILD_NUMBER=$BUILD_NUMBER&quot; &gt; ${JOB_NAME}_${BUILD_NUMBER}.properties</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>export JAVA_HOME=/opt/ybits/env/jdk1.6.0_17
export ANT_HOME=/opt/ybits/env/ant
export ANT_OPTS=&quot;-Xmx4096m -XX:MaxPermSize=512m&quot;
export PATH=$JAVA_HOME/bin:$ANT_HOME/bin:$PATH:$HOME/bin
export P4CLIENT=jenkins_${JOB_NAME}

echo P4CLIENT=$P4CLIENT
echo JENKINS_HOME=$JENKINS_HOME
echo Workspace=${WORKSPACE}
echo ANT_OPTS=${ANT_OPTS}
echo ANT_HOME=$ANT_HOME
echo JAVA_HOME=$JAVA_HOME
echo JBOSS_HOME=$JBOSS_HOME
echo PATH=$PATH

pwd

p4 -u ${P4_USERNAME} -P ${P4_PASSWORD} client -o

#Change ownership to jenkins:jenkins in case any got changed while syncing using the sync script
#sudo chown -R builder:build ${WORKSPACE}

ls -l

#create a temporary directory for src from build team
mkdir -p ${WORKSPACE}/src

#Clean for older temporary directory contents
rm -rf ${WORKSPACE}/src/*

echo Create RPM

echo create SOURCES folder
mkdir -p ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES
mkdir -p ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES

#Change ownership to jenkins:jenkins in case any got changed while syncing using the sync script
#sudo chown -R builder:build ${WORKSPACE}

</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;moneycenter&quot;
#if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot; &amp;&amp; [ ${BRANCH} != &quot;8.0.2&quot; ] &amp;&amp; [ ${BRANCH} != &quot;9.0.2&quot; ] &amp;&amp; [ ${BRANCH} != &quot;9.0.3&quot; ] &amp;&amp; [ ${BRANCH} != &quot;9.0.4&quot; ] &amp;&amp; [ ${BRANCH} != &quot;9.0.4.1&quot; ]  ; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create Moneycenter RPM
echo Creating Moneycenter RPM

#Copy moneycenter.war to SOURCES folder

echo Copy moneycenter.war to SOURCES folder
cp ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/resin/moneycenter.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/apps.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>moneycenter rpmbuild createjson rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=moneycenter
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;ycc&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create ycc RPM
echo Creating ycc RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/uitools/${BRANCH_CODE_VERSION}/yccdist/jboss

#Copy the war file
#sudo cp /home/sdp/buildteamwars/ycc.war ${WORKSPACE}/razor/uitools/${BRANCH_CODE_VERSION}/yccdist/jboss/ycc.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create ycc RPM
echo Creating ycc RPM

#Copy ycc war file to SOURCES folder
echo Copy ycc.war to SOURCES folder

unzip -j ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/ycc-jboss/setup.jar installs/ycc.war -d ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES
unzip -j ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/ycc-jboss/setup.jar version.info -d ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES
#cp ${WORKSPACE}/razor/uitools/${BRANCH_CODE_VERSION}/yccdist/jboss/ycc.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/ycc.war

#cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>ycc
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=ycc
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;yccconfigtool&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create yccconfigtool RPM
echo Creating yccconfigtool RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/tools/YccConfigTool/${CORE_CODE_VERSION}

#Copy the war file
#sudo cp /home/sdp/buildteamwars/yccconfigtool.war ${WORKSPACE}/razor/tools/YccConfigTool/${CORE_CODE_VERSION}/yccconfigtool.war

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create yccconfigtool RPM
echo Creating yccconfigtool RPM


#Copy yccconfigtool war file to SOURCES folder
echo Copy yccconfigtool.war to SOURCES folder

cp ${WORKSPACE}/razor/tools/YccConfigTool/${CORE_CODE_VERSION}/yccconfigtool.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/yccconfigtool.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>yccconfigtool
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=yccconfigtool
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;ubd-jboss&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create ubd-jboss RPM
echo Creating ubd-jboss RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/ubd/dist

#Copy the war file
#sudo cp /home/sdp/buildteamwars/ubd.war ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/ubd/dist/ubd.war

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create ubd-jboss RPM
echo Creating ubd-jboss RPM


#Copy UBD war file to SOURCES folder
echo Copy ubd.war to SOURCES folder

cp ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/ubd/dist/ubd.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/ubd.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>ubd
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=ubd
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;restserver&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create Restserver RPM
echo Creating Restserver RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/appsplatform/${CORE_CODE_VERSION}/soaprest/dist

#Copy the war file
#sudo cp /home/sdp/buildteamwars/services.war ${WORKSPACE}/razor/appsplatform/${CORE_CODE_VERSION}/soaprest/dist/services.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create Restserver RPM
echo Creating Restserver RPM

#Copy Restserver services.war file to SOURCES folder
echo Copy services.war to SOURCES folder

cp ${WORKSPACE}/razor/appsplatform/${CORE_CODE_VERSION}/soaprest/dist/services.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/services.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>restserver rpmbuild createjson rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=restserver
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;ytask&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create ytask RPM
echo Creating ytask RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/ytask/war

#Copy the war file
#sudo cp /home/sdp/buildteamwars/componentset_2/ytask.war ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/ytask/war/ytask.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create ytask RPM
echo Creating ytask RPM

#Copy ytask ytask.war file to SOURCES folder
echo Copy ytask.war to SOURCES folder

cp ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/ytask/war/ytask.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/ytask.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>ytask rpmbuild createjson rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=ytask
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;alerts&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create alerts RPM
echo Creating alerts RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist

#Copy the war file
#sudo cp /home/sdp/buildteamwars/alert.war ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/alert.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create alerts RPM
echo Creating alerts RPM

#Copy alerts alert.war file to SOURCES folder
echo Copy alert.war to SOURCES folder

cp ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/alert.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/alert.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>alerts
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=standalonealerts
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;alerts-jboss&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create alerts-jboss RPM
echo Creating alerts-jboss RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist

#Copy the war file
#sudo cp /home/sdp/buildteamwars/alertengine.war ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/alertengine.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create alerts-jboss RPM
echo Creating alerts-jboss RPM

#Copy alertengine war file to SOURCES folder
echo Copy alertengine.war to SOURCES folder

cp ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/alertengine.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/alertengine.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>alertsjboss
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=alerts
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;appscenter&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create appscenter RPM
echo Creating appscenter RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/appsplatform/${CORE_CODE_VERSION}/dist/resin

#Copy the war file
#sudo cp /home/sdp/buildteamwars/appscenter.war ${WORKSPACE}/razor/appsplatform/${CORE_CODE_VERSION}/dist/resin/appscenter.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create appscenter RPM
echo Creating appscenter RPM

#Copy appscenter war file to SOURCES folder
echo Copy appscenter.war to SOURCES folder

cp ${WORKSPACE}/razor/appsplatform/${CORE_CODE_VERSION}/dist/resin/appscenter.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/appscenter.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>appscenter
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=appscenter
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;dcservices-jboss&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create dcservices-jboss RPM
echo Creating dcservices-jboss RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/dc

#Copy the war file
#sudo cp /home/sdp/buildteamwars/dc.war ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/dc/dc.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create dcservices-jboss RPM
echo Creating dcservices-jboss RPM

#Copy dc war file to SOURCES folder
echo Copy dc.war to SOURCES folder

cp ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/dc/dc.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/dc.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>dc
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=dc
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;refreshservlets&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create refreshservlets RPM
echo Creating refreshservlets RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/

#Copy the war file
#sudo cp /home/sdp/buildteamwars/dcservlets.war ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/dcservlets.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create refreshservlets RPM
echo Creating refreshservlets RPM

#Copy dcservlets war file to SOURCES folder
echo Copy dcservlets.war -&gt; Yodlee.war to SOURCES folder

cp ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/dcservlets.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/Yodlee.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>dcservlets
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=dcservlets
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;paymentengine-jboss&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create paymentengine-jboss RPM
echo Creating paymentengine-jboss RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist

#Copy the war file
#sudo cp /home/sdp/buildteamwars/pe.war ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/pe.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create paymentengine-jboss RPM
echo Creating paymentengine-jboss RPM

#Copy paymentengine war file to SOURCES folder
echo Copy paymentengine.war to SOURCES folder

cp ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/pe.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/pe.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>paymentengine
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=paymentengine
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;payitallpaymon&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create payitallpaymon RPM
echo Creating payitallpaymon RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/paymon2.0/dist

#Copy the war file
#sudo cp /home/sdp/buildteamwars/payitallpaymon.war ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/paymon2.0/dist/payitallpaymon.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create payitallpaymon RPM
echo Creating payitallpaymon RPM

#Copy payitallpaymon war file to SOURCES folder
echo Copy payitallpaymon.war to SOURCES folder

cp ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/paymon2.0/dist/payitallpaymon.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/payitallpaymon.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>payitallpaymon
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=payitallpaymon
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;payeeverification&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create payeeverification RPM
echo Creating payeeverification RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/payeeverification

#Copy the war file
#sudo cp /home/sdp/buildteamwars/payeeverification.war ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/payeeverification/payeeverification.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create payeeverification RPM
echo Creating payeeverification RPM

#Copy payeeverification war file to SOURCES folder
echo Copy payeeverification.war to SOURCES folder

cp ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/payeeverification/payeeverification.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/payeeverification.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>payeeverification
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=payeeverification
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
echo BRANCH=${BRANCH}
SOURCE=&quot;moneycenter&quot;

if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot; &amp;&amp; [ ${BRANCH} == &quot;8.0.2&quot; ]  ; then
      echo &quot;Component matched SOURCE=${SOURCE}&quot;;
      echo &quot;Branch matched BRANCH=${BRANCH}&quot;;
else
  echo &quot;no match of either component or branch&quot;;
  exit -1;
fi</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create moneycenter802 RPM
echo Creating moneycenter802 RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss

#Copy the war file
#sudo cp /home/sdp/buildteamwars/componentset_2/8.0.2/moneycenter.war ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create moneycenter802 RPM
echo Creating moneycenter802 RPM

#Copy moneycenter802 war file to SOURCES folder
echo Copy moneycenter.war for 802 to SOURCES folder

cp ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/apps.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>moneycenter_802
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=moneycenter802
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
echo BRANCH=${BRANCH}
SOURCE=&quot;moneycenter&quot;

if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot; &amp;&amp; [ ${BRANCH} == &quot;9.0.2&quot; ]  ; then
      echo &quot;Component matched SOURCE=${SOURCE}&quot;;
      echo &quot;Branch matched BRANCH=${BRANCH}&quot;;
else
  echo &quot;no match of either component or branch&quot;;
  exit -1;
fi</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create moneycenter902 RPM
echo Creating moneycenter902 RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss

#Copy the war file
#sudo cp /home/sdp/buildteamwars/componentset_2/9.0.2/moneycenter.war ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create moneycenter902 RPM
echo Creating moneycenter902 RPM

#Copy moneycenter902 war file to SOURCES folder
echo Copy moneycenter.war for 902 to SOURCES folder

cp ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/apps.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>moneycenter_902
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=moneycenter902
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
echo BRANCH=${BRANCH}
SOURCE=&quot;moneycenter&quot;

if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot; &amp;&amp; [ ${BRANCH} == &quot;9.0.3&quot; ]  ; then
      echo &quot;Component matched SOURCE=${SOURCE}&quot;;
      echo &quot;Branch matched BRANCH=${BRANCH}&quot;;
else
  echo &quot;no match of either component or branch&quot;;
  exit -1;
fi</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create moneycenter903 RPM
echo Creating moneycenter903 RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss

#Copy the war file
#sudo cp /home/sdp/buildteamwars/componentset_2/9.0.3/moneycenter.war ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create moneycenter903 RPM
echo Creating moneycenter903 RPM

#Copy moneycenter903 war file to SOURCES folder
echo Copy moneycenter.war for 903 to SOURCES folder

cp ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/apps.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>moneycenter_903
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=moneycenter903
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
echo BRANCH=${BRANCH}
SOURCE=&quot;moneycenter&quot;

if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot; &amp;&amp; [ ${BRANCH} == &quot;9.0.4&quot; ]  ; then
      echo &quot;Component matched SOURCE=${SOURCE}&quot;;
      echo &quot;Branch matched BRANCH=${BRANCH}&quot;;
else
  echo &quot;no match of either component or branch&quot;;
  exit -1;
fi</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create moneycenter904 RPM
echo Creating moneycenter904 RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss

#Copy the war file
#sudo cp /home/sdp/buildteamwars/componentset_2/9.0.4/moneycenter.war ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create moneycenter904 RPM
echo Creating moneycenter904 RPM

#Copy moneycenter904 war file to SOURCES folder
echo Copy moneycenter.war for 904 to SOURCES folder

cp ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/apps.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>moneycenter_904
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=moneycenter904
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
echo BRANCH=${BRANCH}
SOURCE=&quot;moneycenter&quot;

if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot; &amp;&amp; [ ${BRANCH} == &quot;9.0.4.1&quot; ]  ; then
      echo &quot;Component matched SOURCE=${SOURCE}&quot;;
      echo &quot;Branch matched BRANCH=${BRANCH}&quot;;
else
  echo &quot;no match of either component or branch&quot;;
  exit -1;
fi</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create moneycenter9041 RPM
echo Creating moneycenter9041 RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss

#Copy the war file
#sudo cp /home/sdp/buildteamwars/componentset_2/9.0.4.1/moneycenter.war ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create moneycenter9041 RPM
echo Creating moneycenter9041 RPM

#Copy moneycenter9041 war file to SOURCES folder
echo Copy moneycenter.war for 9041 to SOURCES folder

cp ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/dist/jboss/moneycenter.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/apps.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>moneycenter_9041
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=moneycenter9041
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;mobile&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create mobile RPM
echo Creating mobile RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/mobile/${BRANCH_CODE_VERSION}/deploy/jboss

#Copy the war file
#sudo cp /home/sdp/buildteamwars/mobile.war ${WORKSPACE}/razor/mobile/${BRANCH_CODE_VERSION}/deploy/jboss/mobile.war

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create mobile RPM
echo Creating mobile RPM

#Copy mobile war file to SOURCES folder
echo Copy mobile.war to SOURCES folder

cp ${WORKSPACE}/razor/mobile/${BRANCH_CODE_VERSION}/deploy/jboss/mobile.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/mobile.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>mobilejboss9041
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=mobilejboss9041
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;ysms&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create ysms RPM
echo Creating ysms RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/mobile/${BRANCH_CODE_VERSION}/deploy

#Copy the war file
#sudo cp /home/sdp/buildteamwars/ysms.war ${WORKSPACE}/razor/mobile/${BRANCH_CODE_VERSION}/deploy/ysms.war

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create ysms RPM
echo Creating ysms RPM

#Copy ysms war file to SOURCES folder
echo Copy ysms.war to SOURCES folder

cp ${WORKSPACE}/razor/mobile/${BRANCH_CODE_VERSION}/deploy/ysms.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/ysms.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>ysmsjboss9041
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=ysmsjboss9041
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;paymon&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create paymon RPM
echo Creating paymon RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/tools/paymon/${BRANCH_CODE_VERSION}/jboss

#Copy the war file
#sudo cp /home/sdp/buildteamwars/paymon.war ${WORKSPACE}/razor/tools/paymon/${BRANCH_CODE_VERSION}/jboss/paymon.war

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create paymon RPM
echo Creating paymon RPM

#Copy paymon war file to SOURCES folder
echo Copy paymon.war to SOURCES folder

cp ${WORKSPACE}/razor/tools/paymon/${BRANCH_CODE_VERSION}/jboss/paymon.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/paymon.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>paymonjboss903
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=paymonjboss903
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;cdpaymon&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create cdpaymon RPM
echo Creating cdpaymon RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/cdpaymondist

#Copy the war file
#sudo cp /home/sdp/buildteamwars/cdpaymon.war ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/cdpaymondist/cdpaymon.war

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create cdpaymon RPM
echo Creating cdpaymon RPM

#Copy cdpaymon war file to SOURCES folder
echo Copy cdpaymon.war to SOURCES folder

cp ${WORKSPACE}/razor/apps/${BRANCH_CODE_VERSION}/cdpaymondist/cdpaymon.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/cdpaymon.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>cdpaymon
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=cdpaymon
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;achmasterdatabase&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create achmasterdatabase RPM
echo Creating achmasterdatabase RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}/achmasterdatabase

#Copy the achmasterdatabase folder
#sudo cp -R /home/sdp/databases/375/achmasterdatabase ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*


#Create Variable based on BUILD_TYPE

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/achmasterdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/achmasterdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/achmasterdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/achmasterdatabase/ ${WORKSPACE}/src

# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}


#Create tar.gz file for achmasterdatabase DB Source

cd ${WORKSPACE}/src/achmasterdatabase
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/achmasterdatabase.tar.gz *

</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>achmasterdb
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=achmasterdatabase
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;bayesiandatabase&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create bayesiandatabase RPM
echo Creating bayesiandatabase RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}/bayesiandatabase

#Copy the bayesiandatabase folder
#sudo cp -R /home/sdp/databases/375/bayesiandatabase ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*


#Create Variable based on BUILD_TYPE

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/bayesiandatabase/ ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/bayesiandatabase/ ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/bayesiandatabase/ ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/bayesiandatabase/ ${WORKSPACE}/src

# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}


#Create tar.gz file for bayesiandatabase DB Source

cd ${WORKSPACE}/src/bayesiandatabase
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/bayesiandatabase.tar.gz *
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>bayesiandb
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=bayesiandatabase
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;configdatabase&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create configdatabase RPM
echo Creating configdatabase RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}/configdatabase

#Copy the configdatabase folder
#sudo cp -R /home/sdp/databases/375/configdatabase ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*


#Create Variable based on BUILD_TYPE

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/configdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/configdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/configdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/configdatabase/ ${WORKSPACE}/src

# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}


#Create tar.gz file for configdatabase DB Source

cd ${WORKSPACE}/src/configdatabase
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/configdatabase.tar.gz *
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>configdb
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=configdatabase
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;oltpdatabase&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create oltpdatabase RPM
echo Creating oltpdatabase RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}/oltpdatabase

#Copy the oltpdatabase folder
#sudo cp -R /home/sdp/databases/375/oltpdatabase ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*


#Create Variable based on BUILD_TYPE

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/oltpdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/oltpdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/oltpdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/oltpdatabase/ ${WORKSPACE}/src

# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}


#Create tar.gz file for oltpdatabase DB Source

cd ${WORKSPACE}/src/oltpdatabase
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/oltpdatabase.tar.gz *
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>oltpdb
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=oltpdatabase
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;paymentsdatabase&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create paymentsdatabase RPM
echo Creating paymentsdatabase RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}/paymentsdatabase

#Copy the paymentsdatabase folder
#sudo cp -R /home/sdp/databases/375/paymentsdatabase ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*


#Create Variable based on BUILD_TYPE

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/paymentsdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/paymentsdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/paymentsdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/paymentsdatabase/ ${WORKSPACE}/src

# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}


#Create tar.gz file for paymentsdatabase DB Source

cd ${WORKSPACE}/src/paymentsdatabase
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/paymentsdatabase.tar.gz *
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>paymentsdb
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=paymentsdatabase
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;yccdatabase&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create yccdatabase RPM
echo Creating yccdatabase RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}/yccdatabase

#Copy the yccdatabase folder
#sudo cp -R /home/sdp/databases/375/yccdatabase ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*


#Create Variable based on BUILD_TYPE

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/yccdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/yccdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/yccdatabase/ ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/yccdatabase/ ${WORKSPACE}/src

# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}


#Create tar.gz file for yccdatabase DB Source

cd ${WORKSPACE}/src/yccdatabase
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/yccdatabase.tar.gz *
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>yccdb
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=yccdatabase
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;newsdk&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create newsdk RPM
echo Creating newsdk RPM


#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/web/server/

#Copy the war file
#sudo cp /home/sdp/buildteamwars/newsdk/yodsoap.war ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/web/server/yodsoap.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create newsdk RPM
echo Creating newsdk RPM

#Copy yodsoap war file to SOURCES folder
echo Copy yodsoap.war to SOURCES folder

cp ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/web/server/yodsoap.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/yodsoap.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>newsdk
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=newsdk
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;sdk&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create sdk RPM
echo Creating sdk RPM


#Create the right folder if it does not exist
#sudo mkdir -p ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/

#Copy the war file
#sudo cp /home/sdp/buildteamwars/sdk/yodsoap.war ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/yodsoap.war


############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create newsdk RPM
echo Creating newsdk RPM

#Copy yodsoap war file to SOURCES folder
echo Copy yodsoap.war to SOURCES folder

cp ${WORKSPACE}/razor/core/${CORE_CODE_VERSION}/dist/yodsoap.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/yodsoap.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>sdk
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=sdk
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;vnode&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>#Clean SOURCES folder


echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*
# Create vnode RPM

echo Creating vnode RPM

#Copy vnode war file to SOURCES folder
echo Copy vnode.jar to SOURCES folder

cp ${WORKSPACE}/razor/appsplatform/${CORE_CODE_VERSION}/nodeserver/vnode.jar ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/vnode.jar

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>vnode
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=vnode
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;messagingservice&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command># Create messagingservice RPM
echo Creating messagingservice RPM


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*


#Create Variable based on BUILD_TYPE

rm -rf ${WORKSPACE}/src/*

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/messagingservice/ ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/messagingservice/ ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/messagingservice/ ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/messagingservice/ ${WORKSPACE}/src

# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}


#Create tar.gz file for messagingservice Source

cd ${WORKSPACE}/src/messagingservice
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/messagingservice.tar.gz *
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>messagingservice
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=messagingservice
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;copycoreplsql&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create copycoreplsql RPM
echo Creating copycoreplsql RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}/plsql

#Copy the copycoreplsql folder
#sudo cp -R /home/sdp/databases/375/plsql ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*


#Create Variable based on BUILD_TYPE

rm -rf ${WORKSPACE}/src/*

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/plsql.zip ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/plsql.zip ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/plsql.zip ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/plsql.zip ${WORKSPACE}/src




# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}


#extract zip
cd ${WORKSPACE}/src
unzip plsql.zip
rm plsql.zip


#Create tar.gz file for plsql Source

cd ${WORKSPACE}/src/
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/plsql.tar.gz *</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>copycoreplsql
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=copycoreplsql
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;copypaymentenginesqls&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create copypaymentenginesqls RPM
echo Creating copypaymentenginesqls RPM

#Create the right folder if it does not exist
#sudo mkdir -p ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}/copypaymentenginesqls

#Copy the copypaymentenginesqls folder
#sudo cp -R /home/sdp/databases/375/copypaymentenginesqls ${INSTALLER_LOCATION}/${BRANCH}.Build.${BUILD_NUMBER}

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*


#Create Variable based on BUILD_TYPE

rm -rf ${WORKSPACE}/src/*

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/paymentenginesqls-yodlee.zip ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/paymentenginesqls-yodlee.zip ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/paymentenginesqls-yodlee.zip ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/paymentenginesqls-yodlee.zip ${WORKSPACE}/src

# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}

#extract zip
cd ${WORKSPACE}/src
unzip paymentenginesqls-yodlee.zip
rm paymentenginesqls-yodlee.zip


#Create tar.gz file for copypaymentenginesqlsSource

cd ${WORKSPACE}/src/
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/paymentenginesqls-yodlee.zip.tar.gz *</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>copypaymentenginesqls
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=copypaymentenginesqls
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;distributedcacheloader&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create DistributedCacheLoader RPM
echo Creating DistributedCacheLoader RPM

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILDROOT/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/BUILD/*
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/RPMS/*

#Create Variable based on BUILD_TYPE

rm -rf ${WORKSPACE}/src/*

# BUILD_TYPE=build
if [ ${BUILD_TYPE} == build ]
then
build_type_folder=Build

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/DistributedCacheLoader.zip ${WORKSPACE}/src

# BUILD_TYPE=label
elif [ ${BUILD_TYPE} == label ]
then
build_type_folder=LabelBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/DistributedCacheLoader.zip ${WORKSPACE}/src

# BUILD_TYPE=Patch
elif [ ${BUILD_TYPE} == Patch -o ${BUILD_TYPE} == AlphabetPatch ]
then
build_type_folder=PatchBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}.${PATCH_NUMBER}/DistributedCacheLoader.zip ${WORKSPACE}/src

# BUILD_TYPE=ShelvedBuild
elif [ ${BUILD_TYPE} == ShelvedBuild ]
then
build_type_folder=shelvedBuild

#Get the source from Build Team
cp -R ${INSTALLER_LOCATION}/${BRANCH}.${build_type_folder}.${BUILD_NUMBER}/DistributedCacheLoader.zip ${WORKSPACE}/src

# BUILD_TYPE does not match
else exit
fi
echo build_type_folder=${build_type_folder}

#extract zip
cd ${WORKSPACE}/src
unzip DistributedCacheLoader.zip
rm -rf DistributedCacheLoader.zip

#Create tar.gz file for plsql Source

cd ${WORKSPACE}/src/
ls -l
tar -cvzf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_dbbuild_scripts/package/SOURCES/distributedcacheloader.tar.gz *</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>distributedcacheloader rpmbuild createjson rpmdeploy</targets>
          <buildFile>sdp_dbbuild_scripts/package/package.xml</buildFile>
          <properties>name=distributedcacheloader
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.6">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.contributed.ShellCondition" plugin="run-condition@1.0">
        <command>COMPONENT_LIST_ALL=&quot;${COMPONENT_LIST_ALL}&quot;
SOURCE=&quot;cobrandtools&quot;
if echo &quot;${COMPONENT_LIST_ALL}&quot; | grep -w &quot;${SOURCE}&quot;; then
  echo &quot;matched&quot;;
else
  echo &quot;no match&quot;;
  exit -1;
fi
</command>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>############################
# Temperory - to be deleted
############################
# Create cobrandtools RPM
echo Creating cobrandtools RPM

############################
# Temperory - to be deleted
############################


#Clean SOURCES folder

#Clean SOURCES folder

echo Delete the contents of SOURCES folder if any
rm -rf ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/*

# Create cobrandtools RPM
echo Creating cobrandtools RPM

#Copy cobrandtools war file to SOURCES folder
echo Copy cobrandtools.war to SOURCES folder

cp ${WORKSPACE}/razor/tools/cobrandtools/${CORE_CODE_VERSION}/dist/cobrandtools.war ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/cobrandtools.war

cp ${WORKSPACE}/build_scripts/installer/version.info ${WORKSPACE}/${JOB_NAME}_${BRANCH}_ws/sdp_build_scripts/package/SOURCES/version.info
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Ant plugin="ant@1.8">
          <targets>cobrandtools
rpmbuild
createjson
rpmdeploy</targets>
          <buildFile>sdp_build_scripts/package/package.xml</buildFile>
          <properties>name=cobrandtools
version=${BUILD_NUMBER}_${PATCH_NUMBER}
release=${RELEASE}
releasevalue=${RELEASEVALUE}
buildtype=${BUILD_TYPE}
branch=${FINAL_BRANCH_NAME}
repo_user=${YODLEE_REPO_USERNAME}
repo_password=${YODLEE_REPO_PASSWORD}
repo_host=${YODLEE_REPO_HOST}
repo_url=${YODLEE_REPO_URL}</properties>
        </hudson.tasks.Ant>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.21">
      <recipients>NDias@yodlee.com Build-Desk@yodlee.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers/>
</project>